<html lang=en>
<head>
<meta charset=utf-8>
    <title>Electron</title>
    </head>
    <body onload="init()">
 
 
<script>
        var canvas, ctx, container;
         canvas = document.createElement( 'canvas' );
          ctx = canvas.getContext("2d");

    var message;
	var start_time;
	var first_ball;//electron
	var distance_from_first_ball, distance_travelled;
	var second_ball;//proton
	var force_bit_speed;
	var expulsion_dir;
	var random_dir;
	let random_x, random_y;
	let random_vx, random_vy;
	var point_entered_x, point_entered_y, point_exit_x, point_exit_y;
	var distance_ratio, absorption_ratio;
	var universe_center_x, universe_center_y, universe_radius;
	var max_object_speed;
	var expulsion_multiplier;
	var counter;
	const PI = 3.14;
	const DIRECTION_SPAN_UNIVERSE = 0.1;
	const DIRECTION_SPAN_ELECTRON = 1.57; // a semi circle
	var throwaway_var;
	

    function init(){
       setupCanvas();
	   start_time = new Date().getTime();
	   counter = 0;
	   force_bit_speed = 2;
	   universe_center_x = 400;
	   universe_center_y = 300;
	   universe_radius = 200*4;
	   expulsion_multiplier = 5;
	   max_object_speed = force_bit_speed/5;
      //vy = (Math.random() * -15) + -5;
	  first_ball = {vx:0, vy:0, x:400, y:200, radius:40, status: 0,   color:"red"};
	  second_ball = {vx:0, vy:0, x:400, y:350, radius:40, status: 0,   color:"red"};
	
       red_force = [];
	   blue_force = [];
	   message = "magnetism";
 
    }//end init method
 
    function draw() {
        ctx.clearRect(0,0,canvas.width, canvas.height); 
        //display some text

	       ctx.fillStyle = "blue";
           ctx.font = "20px Arial";
           ctx.fillText(message, 20,20); 

             //draw everything
			ctx.beginPath();
			ctx.arc(first_ball.x, first_ball.y - 50, first_ball.radius, 0, Math.PI*2, false);
			ctx.fillStyle = "blue";
			ctx.fill();
			ctx.closePath();
			ctx.beginPath();
			ctx.arc(first_ball.x, first_ball.y, first_ball.radius, 0, Math.PI*2, false);
			ctx.fillStyle = "red";
			ctx.fill();
			ctx.closePath();
			
			ctx.beginPath();
			ctx.arc(second_ball.x, second_ball.y, second_ball.radius, 0, Math.PI*2, false);
			ctx.fillStyle = "blue";
			ctx.fill();
			ctx.closePath();
			ctx.beginPath();
			ctx.arc(second_ball.x, second_ball.y + 50, second_ball.radius, 0, Math.PI*2, false);
			ctx.fillStyle = "red";
			ctx.fill();
			ctx.closePath();	
			
			for (let i = 0; i < blue_force.length; i++) {
				ctx.beginPath();
				ctx.arc(blue_force[i].x, blue_force[i].y, blue_force[i].radius, 0, Math.PI*2, false);
				ctx.fillStyle = "blue";
				ctx.fill();
				ctx.closePath();
			}
			for (let i = 0; i < red_force.length; i++) {
				ctx.beginPath();
				ctx.arc(red_force[i].x, red_force[i].y, red_force[i].radius, 0, Math.PI*2, false);
				ctx.fillStyle = "red";
				ctx.fill();
				ctx.closePath();
			}
        
        ballMovement();
 
    }
 
    setInterval(draw, 1000/35); 
    
    
    
    
    function ballMovement(){
 
	   var current_time = new Date().getTime();
	   var time = current_time - start_time;
		time = time/10;
	   
        
        //If either wall is hit, change direction on x axis
		if (first_ball.vy >= 0) {
			first_ball.y += Math.min(max_object_speed, first_ball.vy);
		}
		else {
			first_ball.y -= Math.min(max_object_speed, -first_ball.vy);
		}
		if (first_ball.vx >= 0) {
			first_ball.x += Math.min(max_object_speed, first_ball.vx);
		}
		else {
			first_ball.x -= Math.min(max_object_speed, -first_ball.vx);
		}

		//second_ball.x += Math.min(max_object_speed, second_ball.vx);
		//second_ball.y += Math.min(max_object_speed, second_ball.vy);
		for (let i = 0; i < red_force.length; i++) {
			red_force[i].y += red_force[i].vy;
			red_force[i].x += red_force[i].vx;
		}
		for (let i = 0; i < blue_force.length; i++) {
/*			blue_force[i].age++;
			if (blue_force[i].age > 500) {
				//balls[i].y = 0;
				blue_force.shift();
			}*/
			blue_force[i].y += blue_force[i].vy*1.7;
			blue_force[i].x += blue_force[i].vx*1.7;
			
			if ((blue_force[i].y >= first_ball.y - first_ball.radius && blue_force[i].y <= first_ball.y + first_ball.radius) && (blue_force[i].x >= first_ball.x - first_ball.radius && blue_force[i].x <= first_ball.x + first_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(blue_force[i].x - first_ball.x,2) + Math.pow(blue_force[i].y - first_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= first_ball.radius) {
				
					//this is if collision is detected
					blue_force[i].x = 20;
					expulsion_dir = Math.random()*PI;
					random_x = second_ball.x + Math.cos(expulsion_dir)*second_ball.radius;
					random_y = second_ball.y - 200 - Math.sin(expulsion_dir)*second_ball.radius;
					random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
					random_vx = Math.cos(random_dir)*force_bit_speed;
					random_vy = -Math.sin(random_dir)*force_bit_speed;
					blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 2*first_ball.radius - 30 - 50, radius:1.5, status:0});
					blue_force.shift();
				}
			}
			
			first_ball.y = first_ball.y - 50;
			if ((blue_force[i].y >= first_ball.y - first_ball.radius && blue_force[i].y <= first_ball.y + first_ball.radius) && (blue_force[i].x >= first_ball.x - first_ball.radius && blue_force[i].x <= first_ball.x + first_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(blue_force[i].x - first_ball.x,2) + Math.pow(blue_force[i].y - first_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= first_ball.radius) {
					//this is if collision is detected
					blue_force[i].age = 25;
					first_ball.vy += blue_force[i].vy/500;
					first_ball.vx += blue_force[i].vx/500;

					// flip the direction of the velocity	
					blue_force[i].vx *= -1;
					blue_force[i].vy *= -1;
					
					// move it along a bit
					blue_force[i].x += blue_force[i].vx;
					blue_force[i].y += blue_force[i].vy;
				}
			}
			first_ball.y = first_ball.y + 50;
		
		//*********** RESTARTING THE SAME THING *****************************************************************
		if ((blue_force[i].y >= second_ball.y - second_ball.radius && blue_force[i].y <= second_ball.y + second_ball.radius) && (blue_force[i].x >= second_ball.x - second_ball.radius && blue_force[i].x <= second_ball.x + second_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(blue_force[i].x - second_ball.x,2) + Math.pow(blue_force[i].y - second_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= second_ball.radius) {
				
					second_ball.vx += blue_force[i].vx/500;
					second_ball.vy += blue_force[i].vy/500;
					
					// flip the direction of the velocity	
					blue_force[i].vx *= -1;
					blue_force[i].vy *= -1;
					
					// move it along a bit
					blue_force[i].x += expulsion_multiplier*blue_force[i].vx;
					blue_force[i].y += expulsion_multiplier*blue_force[i].vy;
				}
			}
			
			second_ball.y = second_ball.y + 50;
			if ((blue_force[i].y >= second_ball.y - second_ball.radius && blue_force[i].y <= second_ball.y + second_ball.radius) && (blue_force[i].x >= second_ball.x - second_ball.radius && blue_force[i].x <= second_ball.x + second_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(blue_force[i].x - second_ball.x,2) + Math.pow(blue_force[i].y - second_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= second_ball.radius) {
				
					//this is if collision is detected

					blue_force[i].x = 20;
					expulsion_dir = Math.random()*PI;
					random_x = second_ball.x + Math.cos(expulsion_dir)*second_ball.radius;
					random_y = second_ball.y - Math.sin(expulsion_dir)*second_ball.radius;
					random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
					random_vx = Math.cos(random_dir)*force_bit_speed;
					random_vy = -Math.sin(random_dir)*force_bit_speed;
					blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 2*second_ball.radius - 30, radius:1.5, status:0});
					blue_force.shift();
				}
			}
			second_ball.y = second_ball.y - 50;
			// ENDING THE RESTARTING THINGS *******************************************
			
		}

	for (let i = 0; i < red_force.length; i++) {
			red_force[i].age++;
			if (red_force[i].age > 500) {
				//balls[i].y = 0;
				red_force.shift();
			}
			/*if (red_force[i].x > 2000 || red_force[i].x < -200) {
				red_force.shift();
				number_of_balls--;
			}*/
			red_force[i].y += red_force[i].vy;
			red_force[i].x += red_force[i].vx;
			
			if ((red_force[i].y >= second_ball.y - second_ball.radius && red_force[i].y <= second_ball.y + second_ball.radius) && (red_force[i].x >= second_ball.x - second_ball.radius && red_force[i].x <= second_ball.x + second_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(red_force[i].x - second_ball.x,2) + Math.pow(red_force[i].y - second_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= second_ball.radius) {
				
					//this is if collision is detected
					red_force[i].x = 20;
						expulsion_dir = -Math.random()*PI;
						random_x = second_ball.x + Math.cos(expulsion_dir)*second_ball.radius;
						random_y = second_ball.y - Math.sin(expulsion_dir)*second_ball.radius;
						random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
						random_vx = Math.cos(random_dir)*force_bit_speed;
						random_vy = -Math.sin(random_dir)*force_bit_speed;
						red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 2*second_ball.radius - 30, radius:1.5, status:0});
						red_force.shift();
				}
			}
			
			second_ball.y = second_ball.y + 50;
			if ((red_force[i].y >= second_ball.y - second_ball.radius && red_force[i].y <= second_ball.y + second_ball.radius) && (red_force[i].x >= second_ball.x - second_ball.radius && red_force[i].x <= second_ball.x + second_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(red_force[i].x - second_ball.x,2) + Math.pow(red_force[i].y - second_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= second_ball.radius) {
				
					//this is if collision is detected

					red_force[i].vx = -red_force[i].vx;
					red_force[i].vy = -red_force[i].vy;
					
					red_force[i].x += red_force[i].vx;
					red_force[i].y += red_force[i].vy;
				}
			}
			second_ball.y = second_ball.y - 50;
			
			if ((red_force[i].y >= first_ball.y - first_ball.radius && red_force[i].y <= first_ball.y + first_ball.radius) && (red_force[i].x >= first_ball.x - first_ball.radius && red_force[i].x <= first_ball.x + first_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(red_force[i].x - first_ball.x,2) + Math.pow(red_force[i].y - first_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= first_ball.radius) {
				
					//this is if collision is detected
					red_force[i].age = 25;
					first_ball.vy += red_force[i].vy/500;
					first_ball.vx += red_force[i].vx/500;

					// flip the direction of the velocity	
					red_force[i].vx *= -1;
					red_force[i].vy *= -1;
					
					// move it along a bit
					red_force[i].x += red_force[i].vx;
					red_force[i].y += red_force[i].vy;
				}
			}
			
			first_ball.y = first_ball.y - 50;
			if ((red_force[i].y >= first_ball.y - first_ball.radius && red_force[i].y <= first_ball.y + first_ball.radius) && (red_force[i].x >= first_ball.x - first_ball.radius && red_force[i].x <= first_ball.x + first_ball.radius)) {
				//if its in the square of the top ball
				distance_from_first_ball = Math.pow(red_force[i].x - first_ball.x,2) + Math.pow(red_force[i].y - first_ball.y,2);
				distance_from_first_ball = Math.pow(distance_from_first_ball, 0.5);
				if (distance_from_first_ball <= first_ball.radius) {
				
					//this is if collision is detected
					red_force[i].x = 20;
					expulsion_dir = -Math.random()*PI;
					random_x = first_ball.x + Math.cos(expulsion_dir)*first_ball.radius;
					random_y = first_ball.y - Math.sin(expulsion_dir)*second_ball.radius;
					random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
					random_vx = Math.cos(random_dir)*force_bit_speed;
					random_vy = -Math.sin(random_dir)*force_bit_speed;
					red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 2*first_ball.radius - 30, radius:1.5, status:0});
					red_force.shift();
				}
			}
			first_ball.y = first_ball.y + 50;
		}
		/*for (let i = 0; i < 500; i++) {
			// CONTINUE HERE
			expulsion_dir = Math.random()*3.14;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -1.57/2 + expulsion_dir + Math.random()*1.57;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});

		}
		*/
		// forcebits from outer universe
		/*for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			expulsion_dir = Math.random()*PI;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -DIRECTION_SPAN_UNIVERSE/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_UNIVERSE;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});

		}*/
		/*for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			expulsion_dir = -Math.random()*PI;
			random_x = first_ball.x + Math.cos(expulsion_dir)*first_ball.radius;
			random_y = first_ball.y - Math.sin(expulsion_dir)*first_ball.radius;
			random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
			random_vx = Math.cos(random_dir)*force_bit_speed;
			random_vy = -Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});

		}		
		
		for (let i = 0; i < 2; i++) {
			expulsion_dir = Math.random()*PI;
			random_x = second_ball.x + Math.cos(expulsion_dir)*second_ball.radius;
			random_y = second_ball.y - Math.sin(expulsion_dir)*second_ball.radius;
			random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
			random_vx = Math.cos(random_dir)*force_bit_speed;
			random_vy = -Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});
		}
		//red bits out 
		for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			expulsion_dir = Math.random()*PI;
			random_x = first_ball.x + Math.cos(expulsion_dir)*first_ball.radius*1.1;
			random_y = first_ball.y - Math.sin(expulsion_dir)*first_ball.radius*1.1 - 50;
			random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
			random_vx = Math.cos(random_dir)*force_bit_speed;
			random_vy = -Math.sin(random_dir)*force_bit_speed;
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});

		}
		for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			expulsion_dir = -Math.random()*PI;
			random_x = second_ball.x + Math.cos(expulsion_dir)*second_ball.radius*1.1;
			random_y = second_ball.y - Math.sin(expulsion_dir)*second_ball.radius*1.1 + 50;
			random_dir = -DIRECTION_SPAN_ELECTRON/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_ELECTRON;  //1.57 is pi/2
			random_vx = Math.cos(random_dir)*force_bit_speed;
			random_vy = -Math.sin(random_dir)*force_bit_speed;
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:0.5, status:0});

		}*/
		//the gun shooting thingy 
		
		counter++;
		if (counter > 30) {
			random_x = 500;
			random_y = 400;
			random_dir = PI;
			random_vx = -1;
			random_vy = 0;
			/*blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 250, radius:1.5, status:0});
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 200, radius:1.5, status:0});
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 50, radius:1.5, status:0});
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 10, radius:1.5, status:0});
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 260, radius:1.5, status:0});
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 210, radius:1.5, status:0});
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 60, radius:1.5, status:0});
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			*/
			random_x = 250;
			random_y = 400;
			random_vx = 1;
			random_vy = 0;
			//blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 250, radius:1.5, status:0});
			//blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 200, radius:1.5, status:0});
			//blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 50, radius:1.5, status:0});
			//blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y + 10, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 260, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 210, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y - 60, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			
			random_x = 400;
			random_y = 20;
			random_vx = 0;
			random_vy = 1;
			//blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			//blue_force.push({age: 0, vx:random_vx, vy:-random_vy, x:random_x, y:random_y + 450, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x - 10, y:random_y, radius:1.5, status:0});
			//red_force.push({age: 0, vx:random_vx, vy:-random_vy, x:random_x - 10, y:random_y + 450, radius:1.5, status:0});
			counter = 0;
		}
		
		for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			
			expulsion_dir = Math.random()*PI;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -DIRECTION_SPAN_UNIVERSE/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_UNIVERSE;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			expulsion_dir = -Math.random()*PI;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -DIRECTION_SPAN_UNIVERSE/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_UNIVERSE;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			blue_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			
		}
		
		for (let i = 0; i < 2; i++) {
			// CONTINUE HERE
			
			expulsion_dir = -Math.random()*PI;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -DIRECTION_SPAN_UNIVERSE/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_UNIVERSE;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});
			expulsion_dir = Math.random()*PI;
			random_x = universe_center_x + Math.cos(expulsion_dir)*universe_radius;
			random_y = universe_center_y - Math.sin(expulsion_dir)*universe_radius;
			random_dir = -DIRECTION_SPAN_UNIVERSE/2 + expulsion_dir + Math.random()*DIRECTION_SPAN_UNIVERSE;  //1.57 is pi/2
			random_vx = -Math.cos(random_dir)*force_bit_speed;
			random_vy = Math.sin(random_dir)*force_bit_speed;
			red_force.push({age: 0, vx:random_vx, vy:random_vy, x:random_x, y:random_y, radius:1.5, status:0});		

		}
		
		
       
		var dt = new Date();
		message = "magnetism stuff";// + dt.getTime();
    }
    
 
     function setupCanvas() {//setup canvas
 
 
	container = document.createElement( 'div' );
	container.className = "container";
 
	canvas.width = window.innerWidth; 
	canvas.height = window.innerHeight; 
	document.body.appendChild(container);
	container.appendChild(canvas);	
 
	ctx.strokeStyle = "#ffffff";
	ctx.lineWidth = 2;	
}
 
        </script>
    </body>
</html>
